function [methodinfo,structs,enuminfo,ThunkLibName]=libalphamelts_proto
%LIBALPHAMELTS_PROTO Create structures to define interfaces found in 'MELTSdynamic'.

%This function was generated by loadlibrary.m parser version  on Wed Feb  8 15:26:34 2023
%perl options:'MELTSdynamic.i -outfile=libalphamelts_proto.m -thunkfile=libalphamelts_thunk_pcwin64.c -header=MELTSdynamic.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'libalphamelts_thunk_pcwin64');
% void addConsole ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='addConsole'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% void closeConsole ( void ); 
fcns.thunkname{fcnNum}='voidvoidThunk';fcns.name{fcnNum}='closeConsole'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int getCalculationMode ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='getCalculationMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
% int setCalculationMode ( int mode ); 
fcns.thunkname{fcnNum}='int32int32Thunk';fcns.name{fcnNum}='setCalculationMode'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% void getMeltsOxideNames ( int * failure , char * oxideNames , int * nCharInName , int * numberOxides ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='getMeltsOxideNames'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% void getMeltsOxideWeights ( int * failure , double * oxideWeights , int * numberOxides ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='getMeltsOxideWeights'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% void getMeltsPhaseNames ( int * failure , char * phaseNames , int * nCharInName , int * numberPhases , int phaseIndices []); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='getMeltsPhaseNames'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% void getMeltsWeightsAndFormulas ( int * failure , char * phaseName , double * endMemberWeights , char * formulaPtr , int * nCharInName , int * numberEndMembers ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringvoidPtrcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='getMeltsWeightsAndFormulas'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'doublePtr', 'cstring', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% void driveMeltsProcess ( int * failure , int * mode , double * pressure , double * bulkComposition , double * entropy , double * temperature , char * phaseNames , int * nCharInName , int * numberPhases , int * output , char * errorString , int * nCharInString , double * phaseProperties , int phaseIndices []); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrcstringvoidPtrvoidPtrvoidPtrcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='driveMeltsProcess'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr', 'cstring', 'int32Ptr', 'int32Ptr', 'int32Ptr', 'cstring', 'int32Ptr', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
% void setMeltsSystemProperties ( int * failure , char * strings , int * nCharInString , int * numberStrings ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringvoidPtrvoidPtrThunk';fcns.name{fcnNum}='setMeltsSystemProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
% void getMeltsPhaseProperties ( int * failure , char * phaseName , double * temperature , double * pressure , double * bulkComposition , double * phaseProperties ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='getMeltsPhaseProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void getMeltsViscosity ( int * failure , char * model , double * temperature , double * bulkComposition , double * viscosity ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='getMeltsViscosity'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void getMeltsMolarProperties ( int * failure , char * phaseName , double * temperature , double * pressure , double * bulkComposition , double * phaseProperties ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='getMeltsMolarProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'doublePtr', 'doublePtr', 'doublePtr', 'doublePtr'};fcnNum=fcnNum+1;
% void getMeltsEndMemberProperties ( int * failure , char * phaseName , double * temperature , double * pressure , double * bulkComposition , char * endMemberFormulas , int * nCharInName , int * numberEndMembers , double * endMemberProperties ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringvoidPtrvoidPtrvoidPtrcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='getMeltsEndMemberProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'doublePtr', 'doublePtr', 'doublePtr', 'cstring', 'int32Ptr', 'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% void getMeltsOxideProperties ( int * failure , char * phaseName , double * temperature , double * pressure , double * bulkComposition , char * oxideNames , int * nCharInName , int * numberOxides , double * oxideProperties ); 
fcns.thunkname{fcnNum}='voidvoidPtrcstringvoidPtrvoidPtrvoidPtrcstringvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='getMeltsOxideProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'cstring', 'doublePtr', 'doublePtr', 'doublePtr', 'cstring', 'int32Ptr', 'int32Ptr', 'doublePtr'};fcnNum=fcnNum+1;
% void getMeltsSaturationState ( int * failure , double * pressure , double * bulkComposition , double * temperature , char * phasePtr , int * nCharInName , int * numberPhases , double * phaseProperties , int phaseIndices []); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrvoidPtrcstringvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='getMeltsSaturationState'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'doublePtr', 'doublePtr', 'doublePtr', 'cstring', 'int32Ptr', 'int32Ptr', 'doublePtr', 'int32Ptr'};fcnNum=fcnNum+1;
methodinfo=fcns;